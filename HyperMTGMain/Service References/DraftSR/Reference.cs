//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.18063
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace HyperMTGMain.DraftSR {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DraftSR.IDraft", CallbackContract=typeof(HyperMTGMain.DraftSR.IDraftCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IDraft {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDraft/Connect", ReplyAction="http://tempuri.org/IDraft/ConnectResponse")]
        void Connect(HyperServer.Draft.DraftPlayer client);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDraft/Connect", ReplyAction="http://tempuri.org/IDraft/ConnectResponse")]
        System.IAsyncResult BeginConnect(HyperServer.Draft.DraftPlayer client, System.AsyncCallback callback, object asyncState);
        
        void EndConnect(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsTerminating=true, Action="http://tempuri.org/IDraft/Disconnect")]
        void Disconnect(HyperServer.Draft.DraftPlayer client);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsTerminating=true, AsyncPattern=true, Action="http://tempuri.org/IDraft/Disconnect")]
        System.IAsyncResult BeginDisconnect(HyperServer.Draft.DraftPlayer client, System.AsyncCallback callback, object asyncState);
        
        void EndDisconnect(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDraft/HostGame")]
        void HostGame(int maxPlayers, int timeLimit, System.Collections.Generic.List<string> setCodes);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IDraft/HostGame")]
        System.IAsyncResult BeginHostGame(int maxPlayers, int timeLimit, System.Collections.Generic.List<string> setCodes, System.AsyncCallback callback, object asyncState);
        
        void EndHostGame(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDraft/Start")]
        void Start();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IDraft/Start")]
        System.IAsyncResult BeginStart(System.AsyncCallback callback, object asyncState);
        
        void EndStart(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDraft/SendMessage")]
        void SendMessage(HyperServer.Common.Message msg);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IDraft/SendMessage")]
        System.IAsyncResult BeginSendMessage(HyperServer.Common.Message msg, System.AsyncCallback callback, object asyncState);
        
        void EndSendMessage(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDraft/Ready")]
        void Ready(HyperServer.Draft.DraftPlayer player);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IDraft/Ready")]
        System.IAsyncResult BeginReady(HyperServer.Draft.DraftPlayer player, System.AsyncCallback callback, object asyncState);
        
        void EndReady(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDraft/SendPack")]
        void SendPack(HyperServer.Draft.DraftPlayer player);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IDraft/SendPack")]
        System.IAsyncResult BeginSendPack(HyperServer.Draft.DraftPlayer player, System.AsyncCallback callback, object asyncState);
        
        void EndSendPack(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDraft/End")]
        void End();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IDraft/End")]
        System.IAsyncResult BeginEnd(System.AsyncCallback callback, object asyncState);
        
        void EndEnd(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDraftCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDraft/OnConnect")]
        void OnConnect(HyperServer.Common.ConnectionResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IDraft/OnConnect")]
        System.IAsyncResult BeginOnConnect(HyperServer.Common.ConnectionResult result, System.AsyncCallback callback, object asyncState);
        
        void EndOnConnect(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDraft/RefreshGame")]
        void RefreshGame(int maxPlayers, int timeLimit, System.Collections.Generic.List<string> setCodes);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IDraft/RefreshGame")]
        System.IAsyncResult BeginRefreshGame(int maxPlayers, int timeLimit, System.Collections.Generic.List<string> setCodes, System.AsyncCallback callback, object asyncState);
        
        void EndRefreshGame(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDraft/OnJoin")]
        void OnJoin(HyperServer.Draft.DraftPlayer client);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IDraft/OnJoin")]
        System.IAsyncResult BeginOnJoin(HyperServer.Draft.DraftPlayer client, System.AsyncCallback callback, object asyncState);
        
        void EndOnJoin(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDraft/OnLeave")]
        void OnLeave(HyperServer.Draft.DraftPlayer client);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IDraft/OnLeave")]
        System.IAsyncResult BeginOnLeave(HyperServer.Draft.DraftPlayer client, System.AsyncCallback callback, object asyncState);
        
        void EndOnLeave(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDraft/RefreshClients")]
        void RefreshClients(System.Collections.Generic.List<HyperServer.Draft.DraftPlayer> clients);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IDraft/RefreshClients")]
        System.IAsyncResult BeginRefreshClients(System.Collections.Generic.List<HyperServer.Draft.DraftPlayer> clients, System.AsyncCallback callback, object asyncState);
        
        void EndRefreshClients(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDraft/OnStart")]
        void OnStart();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IDraft/OnStart")]
        System.IAsyncResult BeginOnStart(System.AsyncCallback callback, object asyncState);
        
        void EndOnStart(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDraft/OnOpenBooster")]
        void OnOpenBooster(string setCode);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IDraft/OnOpenBooster")]
        System.IAsyncResult BeginOnOpenBooster(string setCode, System.AsyncCallback callback, object asyncState);
        
        void EndOnOpenBooster(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDraft/OnReceivePack")]
        void OnReceivePack(System.Collections.Generic.List<string> cardIDs);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IDraft/OnReceivePack")]
        System.IAsyncResult BeginOnReceivePack(System.Collections.Generic.List<string> cardIDs, System.AsyncCallback callback, object asyncState);
        
        void EndOnReceivePack(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDraft/OnMessage")]
        void OnMessage(HyperServer.Common.Message msg);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IDraft/OnMessage")]
        System.IAsyncResult BeginOnMessage(HyperServer.Common.Message msg, System.AsyncCallback callback, object asyncState);
        
        void EndOnMessage(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDraft/OnReady")]
        void OnReady(HyperServer.Draft.DraftPlayer player);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IDraft/OnReady")]
        System.IAsyncResult BeginOnReady(HyperServer.Draft.DraftPlayer player, System.AsyncCallback callback, object asyncState);
        
        void EndOnReady(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDraft/OnEnd")]
        void OnEnd();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IDraft/OnEnd")]
        System.IAsyncResult BeginOnEnd(System.AsyncCallback callback, object asyncState);
        
        void EndOnEnd(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDraftChannel : HyperMTGMain.DraftSR.IDraft, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DraftClient : System.ServiceModel.DuplexClientBase<HyperMTGMain.DraftSR.IDraft>, HyperMTGMain.DraftSR.IDraft {
        
        private BeginOperationDelegate onBeginConnectDelegate;
        
        private EndOperationDelegate onEndConnectDelegate;
        
        private System.Threading.SendOrPostCallback onConnectCompletedDelegate;
        
        private BeginOperationDelegate onBeginDisconnectDelegate;
        
        private EndOperationDelegate onEndDisconnectDelegate;
        
        private System.Threading.SendOrPostCallback onDisconnectCompletedDelegate;
        
        private BeginOperationDelegate onBeginHostGameDelegate;
        
        private EndOperationDelegate onEndHostGameDelegate;
        
        private System.Threading.SendOrPostCallback onHostGameCompletedDelegate;
        
        private BeginOperationDelegate onBeginStartDelegate;
        
        private EndOperationDelegate onEndStartDelegate;
        
        private System.Threading.SendOrPostCallback onStartCompletedDelegate;
        
        private BeginOperationDelegate onBeginSendMessageDelegate;
        
        private EndOperationDelegate onEndSendMessageDelegate;
        
        private System.Threading.SendOrPostCallback onSendMessageCompletedDelegate;
        
        private BeginOperationDelegate onBeginReadyDelegate;
        
        private EndOperationDelegate onEndReadyDelegate;
        
        private System.Threading.SendOrPostCallback onReadyCompletedDelegate;
        
        private BeginOperationDelegate onBeginSendPackDelegate;
        
        private EndOperationDelegate onEndSendPackDelegate;
        
        private System.Threading.SendOrPostCallback onSendPackCompletedDelegate;
        
        private BeginOperationDelegate onBeginEndDelegate;
        
        private EndOperationDelegate onEndEndDelegate;
        
        private System.Threading.SendOrPostCallback onEndCompletedDelegate;
        
        public DraftClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public DraftClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public DraftClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public DraftClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public DraftClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> ConnectCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DisconnectCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> HostGameCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> StartCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SendMessageCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> ReadyCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SendPackCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> EndCompleted;
        
        public void Connect(HyperServer.Draft.DraftPlayer client) {
            base.Channel.Connect(client);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginConnect(HyperServer.Draft.DraftPlayer client, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginConnect(client, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndConnect(System.IAsyncResult result) {
            base.Channel.EndConnect(result);
        }
        
        private System.IAsyncResult OnBeginConnect(object[] inValues, System.AsyncCallback callback, object asyncState) {
            HyperServer.Draft.DraftPlayer client = ((HyperServer.Draft.DraftPlayer)(inValues[0]));
            return this.BeginConnect(client, callback, asyncState);
        }
        
        private object[] OnEndConnect(System.IAsyncResult result) {
            this.EndConnect(result);
            return null;
        }
        
        private void OnConnectCompleted(object state) {
            if ((this.ConnectCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ConnectCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ConnectAsync(HyperServer.Draft.DraftPlayer client) {
            this.ConnectAsync(client, null);
        }
        
        public void ConnectAsync(HyperServer.Draft.DraftPlayer client, object userState) {
            if ((this.onBeginConnectDelegate == null)) {
                this.onBeginConnectDelegate = new BeginOperationDelegate(this.OnBeginConnect);
            }
            if ((this.onEndConnectDelegate == null)) {
                this.onEndConnectDelegate = new EndOperationDelegate(this.OnEndConnect);
            }
            if ((this.onConnectCompletedDelegate == null)) {
                this.onConnectCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnConnectCompleted);
            }
            base.InvokeAsync(this.onBeginConnectDelegate, new object[] {
                        client}, this.onEndConnectDelegate, this.onConnectCompletedDelegate, userState);
        }
        
        public void Disconnect(HyperServer.Draft.DraftPlayer client) {
            base.Channel.Disconnect(client);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDisconnect(HyperServer.Draft.DraftPlayer client, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDisconnect(client, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndDisconnect(System.IAsyncResult result) {
            base.Channel.EndDisconnect(result);
        }
        
        private System.IAsyncResult OnBeginDisconnect(object[] inValues, System.AsyncCallback callback, object asyncState) {
            HyperServer.Draft.DraftPlayer client = ((HyperServer.Draft.DraftPlayer)(inValues[0]));
            return this.BeginDisconnect(client, callback, asyncState);
        }
        
        private object[] OnEndDisconnect(System.IAsyncResult result) {
            this.EndDisconnect(result);
            return null;
        }
        
        private void OnDisconnectCompleted(object state) {
            if ((this.DisconnectCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DisconnectCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DisconnectAsync(HyperServer.Draft.DraftPlayer client) {
            this.DisconnectAsync(client, null);
        }
        
        public void DisconnectAsync(HyperServer.Draft.DraftPlayer client, object userState) {
            if ((this.onBeginDisconnectDelegate == null)) {
                this.onBeginDisconnectDelegate = new BeginOperationDelegate(this.OnBeginDisconnect);
            }
            if ((this.onEndDisconnectDelegate == null)) {
                this.onEndDisconnectDelegate = new EndOperationDelegate(this.OnEndDisconnect);
            }
            if ((this.onDisconnectCompletedDelegate == null)) {
                this.onDisconnectCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDisconnectCompleted);
            }
            base.InvokeAsync(this.onBeginDisconnectDelegate, new object[] {
                        client}, this.onEndDisconnectDelegate, this.onDisconnectCompletedDelegate, userState);
        }
        
        public void HostGame(int maxPlayers, int timeLimit, System.Collections.Generic.List<string> setCodes) {
            base.Channel.HostGame(maxPlayers, timeLimit, setCodes);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginHostGame(int maxPlayers, int timeLimit, System.Collections.Generic.List<string> setCodes, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginHostGame(maxPlayers, timeLimit, setCodes, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndHostGame(System.IAsyncResult result) {
            base.Channel.EndHostGame(result);
        }
        
        private System.IAsyncResult OnBeginHostGame(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int maxPlayers = ((int)(inValues[0]));
            int timeLimit = ((int)(inValues[1]));
            System.Collections.Generic.List<string> setCodes = ((System.Collections.Generic.List<string>)(inValues[2]));
            return this.BeginHostGame(maxPlayers, timeLimit, setCodes, callback, asyncState);
        }
        
        private object[] OnEndHostGame(System.IAsyncResult result) {
            this.EndHostGame(result);
            return null;
        }
        
        private void OnHostGameCompleted(object state) {
            if ((this.HostGameCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.HostGameCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void HostGameAsync(int maxPlayers, int timeLimit, System.Collections.Generic.List<string> setCodes) {
            this.HostGameAsync(maxPlayers, timeLimit, setCodes, null);
        }
        
        public void HostGameAsync(int maxPlayers, int timeLimit, System.Collections.Generic.List<string> setCodes, object userState) {
            if ((this.onBeginHostGameDelegate == null)) {
                this.onBeginHostGameDelegate = new BeginOperationDelegate(this.OnBeginHostGame);
            }
            if ((this.onEndHostGameDelegate == null)) {
                this.onEndHostGameDelegate = new EndOperationDelegate(this.OnEndHostGame);
            }
            if ((this.onHostGameCompletedDelegate == null)) {
                this.onHostGameCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnHostGameCompleted);
            }
            base.InvokeAsync(this.onBeginHostGameDelegate, new object[] {
                        maxPlayers,
                        timeLimit,
                        setCodes}, this.onEndHostGameDelegate, this.onHostGameCompletedDelegate, userState);
        }
        
        public void Start() {
            base.Channel.Start();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginStart(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginStart(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndStart(System.IAsyncResult result) {
            base.Channel.EndStart(result);
        }
        
        private System.IAsyncResult OnBeginStart(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginStart(callback, asyncState);
        }
        
        private object[] OnEndStart(System.IAsyncResult result) {
            this.EndStart(result);
            return null;
        }
        
        private void OnStartCompleted(object state) {
            if ((this.StartCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.StartCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void StartAsync() {
            this.StartAsync(null);
        }
        
        public void StartAsync(object userState) {
            if ((this.onBeginStartDelegate == null)) {
                this.onBeginStartDelegate = new BeginOperationDelegate(this.OnBeginStart);
            }
            if ((this.onEndStartDelegate == null)) {
                this.onEndStartDelegate = new EndOperationDelegate(this.OnEndStart);
            }
            if ((this.onStartCompletedDelegate == null)) {
                this.onStartCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnStartCompleted);
            }
            base.InvokeAsync(this.onBeginStartDelegate, null, this.onEndStartDelegate, this.onStartCompletedDelegate, userState);
        }
        
        public void SendMessage(HyperServer.Common.Message msg) {
            base.Channel.SendMessage(msg);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSendMessage(HyperServer.Common.Message msg, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSendMessage(msg, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndSendMessage(System.IAsyncResult result) {
            base.Channel.EndSendMessage(result);
        }
        
        private System.IAsyncResult OnBeginSendMessage(object[] inValues, System.AsyncCallback callback, object asyncState) {
            HyperServer.Common.Message msg = ((HyperServer.Common.Message)(inValues[0]));
            return this.BeginSendMessage(msg, callback, asyncState);
        }
        
        private object[] OnEndSendMessage(System.IAsyncResult result) {
            this.EndSendMessage(result);
            return null;
        }
        
        private void OnSendMessageCompleted(object state) {
            if ((this.SendMessageCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SendMessageCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SendMessageAsync(HyperServer.Common.Message msg) {
            this.SendMessageAsync(msg, null);
        }
        
        public void SendMessageAsync(HyperServer.Common.Message msg, object userState) {
            if ((this.onBeginSendMessageDelegate == null)) {
                this.onBeginSendMessageDelegate = new BeginOperationDelegate(this.OnBeginSendMessage);
            }
            if ((this.onEndSendMessageDelegate == null)) {
                this.onEndSendMessageDelegate = new EndOperationDelegate(this.OnEndSendMessage);
            }
            if ((this.onSendMessageCompletedDelegate == null)) {
                this.onSendMessageCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSendMessageCompleted);
            }
            base.InvokeAsync(this.onBeginSendMessageDelegate, new object[] {
                        msg}, this.onEndSendMessageDelegate, this.onSendMessageCompletedDelegate, userState);
        }
        
        public void Ready(HyperServer.Draft.DraftPlayer player) {
            base.Channel.Ready(player);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginReady(HyperServer.Draft.DraftPlayer player, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginReady(player, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndReady(System.IAsyncResult result) {
            base.Channel.EndReady(result);
        }
        
        private System.IAsyncResult OnBeginReady(object[] inValues, System.AsyncCallback callback, object asyncState) {
            HyperServer.Draft.DraftPlayer player = ((HyperServer.Draft.DraftPlayer)(inValues[0]));
            return this.BeginReady(player, callback, asyncState);
        }
        
        private object[] OnEndReady(System.IAsyncResult result) {
            this.EndReady(result);
            return null;
        }
        
        private void OnReadyCompleted(object state) {
            if ((this.ReadyCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ReadyCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ReadyAsync(HyperServer.Draft.DraftPlayer player) {
            this.ReadyAsync(player, null);
        }
        
        public void ReadyAsync(HyperServer.Draft.DraftPlayer player, object userState) {
            if ((this.onBeginReadyDelegate == null)) {
                this.onBeginReadyDelegate = new BeginOperationDelegate(this.OnBeginReady);
            }
            if ((this.onEndReadyDelegate == null)) {
                this.onEndReadyDelegate = new EndOperationDelegate(this.OnEndReady);
            }
            if ((this.onReadyCompletedDelegate == null)) {
                this.onReadyCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnReadyCompleted);
            }
            base.InvokeAsync(this.onBeginReadyDelegate, new object[] {
                        player}, this.onEndReadyDelegate, this.onReadyCompletedDelegate, userState);
        }
        
        public void SendPack(HyperServer.Draft.DraftPlayer player) {
            base.Channel.SendPack(player);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSendPack(HyperServer.Draft.DraftPlayer player, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSendPack(player, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndSendPack(System.IAsyncResult result) {
            base.Channel.EndSendPack(result);
        }
        
        private System.IAsyncResult OnBeginSendPack(object[] inValues, System.AsyncCallback callback, object asyncState) {
            HyperServer.Draft.DraftPlayer player = ((HyperServer.Draft.DraftPlayer)(inValues[0]));
            return this.BeginSendPack(player, callback, asyncState);
        }
        
        private object[] OnEndSendPack(System.IAsyncResult result) {
            this.EndSendPack(result);
            return null;
        }
        
        private void OnSendPackCompleted(object state) {
            if ((this.SendPackCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SendPackCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SendPackAsync(HyperServer.Draft.DraftPlayer player) {
            this.SendPackAsync(player, null);
        }
        
        public void SendPackAsync(HyperServer.Draft.DraftPlayer player, object userState) {
            if ((this.onBeginSendPackDelegate == null)) {
                this.onBeginSendPackDelegate = new BeginOperationDelegate(this.OnBeginSendPack);
            }
            if ((this.onEndSendPackDelegate == null)) {
                this.onEndSendPackDelegate = new EndOperationDelegate(this.OnEndSendPack);
            }
            if ((this.onSendPackCompletedDelegate == null)) {
                this.onSendPackCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSendPackCompleted);
            }
            base.InvokeAsync(this.onBeginSendPackDelegate, new object[] {
                        player}, this.onEndSendPackDelegate, this.onSendPackCompletedDelegate, userState);
        }
        
        public void End() {
            base.Channel.End();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginEnd(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginEnd(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndEnd(System.IAsyncResult result) {
            base.Channel.EndEnd(result);
        }
        
        private System.IAsyncResult OnBeginEnd(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginEnd(callback, asyncState);
        }
        
        private object[] OnEndEnd(System.IAsyncResult result) {
            this.EndEnd(result);
            return null;
        }
        
        private void OnEndCompleted(object state) {
            if ((this.EndCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.EndCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void EndAsync() {
            this.EndAsync(null);
        }
        
        public void EndAsync(object userState) {
            if ((this.onBeginEndDelegate == null)) {
                this.onBeginEndDelegate = new BeginOperationDelegate(this.OnBeginEnd);
            }
            if ((this.onEndEndDelegate == null)) {
                this.onEndEndDelegate = new EndOperationDelegate(this.OnEndEnd);
            }
            if ((this.onEndCompletedDelegate == null)) {
                this.onEndCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnEndCompleted);
            }
            base.InvokeAsync(this.onBeginEndDelegate, null, this.onEndEndDelegate, this.onEndCompletedDelegate, userState);
        }
    }
}
